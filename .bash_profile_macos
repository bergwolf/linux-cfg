# ~/.bashrc

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Some applications read the EDITOR variable to determine your favourite text
# editor. So uncomment the line below and enter the editor of your choice :-)
test -s /etc/bash.bashrc && . /etc/bash.bashrc || true
export EDITOR=/usr/bin/vim

alias ls='ls -G'
alias l='ls -la'
alias la='ls -a'
alias ..='cd ..'
alias ...='cd ../..'
alias ll='ls -lh'
#alias grep='grep -i'
alias df='df -h'
#alias ssh='ssh -Y'
alias pa='ps aux'
alias cs='CPWD=`pwd`;find $CPWD -name "*.c" |grep -v rpmbuild |grep -v build > cscope.files; cscope -bRql;ctags -R --exclude=rpmbuild --exclude=build'
#alias mygdb='libtool --mode=execute gdb'
#alias myvalgrind='libtool --mode=execute valgrind --tool=memcheck --leak-check=full --leak-resolution=high'
alias alilang-ssh='ssh -R 8123:localhost:8123 -R 1080:localhost:`alilang-proxy port`'
alias python='python3'
alias pip='pip3'

alias q='exit'
alias r='screen -r'

test -s ~/.alias && . ~/.alias || true
test -s ~/.bash_aliases && . ~/.bash_aliases || true
test -s ~/bin/cdargs-bash.sh && . ~/bin/cdargs-bash.sh || true

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  elif [ -f /opt/homebrew/etc/profile.d/bash_completion.sh ]; then
    . /opt/homebrew/etc/profile.d/bash_completion.sh
  elif [ -f /usr/local/etc/bash_completion ]; then
    . /usr/local/etc/bash_completion
  fi
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
#shopt -s checkwinsize

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
#PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
PS1='\[\e[31;1m\][\h@\W]\[\e[0m\]\$'

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
    ;;
screen*)
    #PROMPT_COMMAND='echo -ne "\033k\033\134\033k${HOSTNAME}[`basename ${PWD}`]\033\134"'
    PROMPT_COMMAND='echo -ne "\033k\033\0134\033k[`basename ${PWD}`]\033\0134"'
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.rar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:';
    export LS_COLORS
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
#alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# git env
#GIT_COMMITTER_NAME="Peng Tao"
#GIT_COMMITTER_EMAIL="<bergwolf@gmail.com>"
#export GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL
export GIT_LFS_SKIP_SMUDGE=1

export LC_ALL="en_US.UTF-8"
export LANGUAGE="en"
export LANG="C"

# golang & docker
PATH=$PATH:/Users/bergwolf/bin:/opt/homebrew/bin
export GOPATH=$HOME/workplace/golang
#export $(go env|grep GOROOT|sed -e 's/"//g')
PATH=/opt/homebrew/bin:/sbin:/usr/sbin:/usr/local/sbin:$PATH:~/bin:$GOPATH/bin:$GOROOT/bin:/Users/graymalkin/bin
export PATH="/opt/homebrew/opt/curl/bin:$PATH"
export PATH="/Users/bergwolf/ai-infra/compiler/openxal/iree-build/tools:$PATH"

test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

export PATH="$HOME/.cargo/bin:$HOME/.kusion/bin/:$HOME/.kusion/kclvm/bin:$PATH"

test -s $HOME/.cargo/env && source $HOME/.cargo/env || true
test -f ~/.rustup/completions.cargo && . ~/.rustup/completions.cargo || true

# jdk 8
#export PATH="/usr/local/opt/openjdk@8/bin:$PATH"
#export CPPFLAGS="-I/usr/local/opt/openjdk@8/include"
. "$HOME/.cargo/env"
export PATH=~/.ssctl/bin:$PATH

# ollama
#export OLLAMA_HOST=192.168.122.1

# key bindings
bind '"\C-f": forward-word'
bind '"\C-b": backward-word'
bind '"\C-^?": backward-delete-word'

export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
export CPPFLAGS="-I/opt/homebrew/opt/curl/include"
export CMAKE_CXX_COMPILER_LAUNCHER=ccache

[[ "$(uname)" != "Darwin" ]] && export LLVM_ENABLE_LLD="ON" || export LLVM_ENABLE_LLD="OFF"

export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
eval "$(/opt/homebrew/bin/brew shellenv)"
